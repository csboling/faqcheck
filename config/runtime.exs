import Config

defmodule ProdHelpers do
  def load_var(name, message) do
    System.get_env(name) ||
      raise """
      environment variable #{name} is missing.
      #{message}
      """
  end
end

if config_env() == :prod do
  secret_key_base = ProdHelpers.load_var "SECRET_KEY_BASE",
    "You can generate one by calling: mix phx.gen.secret"

  app_name = ProdHelpers.load_var "FLY_APP_NAME",
    "This is set by the fly.io runtime environment, you need to set a value for it when running elsewhere."

  config :faqcheck_web, FaqcheckWeb.Endpoint,
    server: true,
    url: [scheme: "https", host: "#{app_name}.fly.dev", port: 443],
    http: [
      port: String.to_integer(System.get_env("PORT") || "4000"),
      # IMPORTANT: support IPv6 addresses
      transport_options: [socket_opts: [:inet6]]
    ],
    secret_key_base: secret_key_base

  report_drive_id = ProdHelpers.load_var "SHAREPOINT_REPORTS_DRIVE",
    "This is the Sharepoint drive ID where reports will be saved"
  report_folder_id = ProdHelpers.load_var "SHAREPOINT_REPORTS_FOLDER",
    "This is the Sharepoint folder ID where reports will be saved"
  config :faqcheck, :import_report_target,
    [
      drive_id: report_drive_id,
      folder_id: report_folder_id,
    ]
  config :faqcheck, :oldest_report_target,
    [
      drive_id: report_drive_id,
      folder_id: report_folder_id
    ]
  config :faqcheck, Faqcheck.Scheduler,
    jobs: [
      # run at midnight on the 1st and the 15th of every month
      {"0 0 1,15 * *", {Faqcheck.Sources.Strategies, :scrape, []}},
      {"0 0 1 * *", {Faqcheck.Referrals, :report_oldest, []}},
    ]

  microsoft_bot_id = ProdHelpers.load_var "MICROSOFT_BOT_ID",
    "This is generated by Microsoft Teams when you set up the bot in App Studio."
  microsoft_bot_password = ProdHelpers.load_var "MICROSOFT_BOT_PASSWORD",
    "This is generated by Microsoft Teams when you set up the bot in App Studio."
  config :ex_microsoftbot,
    app_id: microsoft_bot_id,
    app_password: microsoft_bot_password

  microsoft_api_tenant_id = ProdHelpers.load_var "MICROSOFT_API_TENANT_ID",
    "This is generated by Microsoft Azure when you configure the app in App Registrations."
  microsoft_api_client_id = ProdHelpers.load_var "MICROSOFT_API_CLIENT_ID",
    "This is generated by Microsoft Azure when you configure the app in App Registrations."
  microsoft_api_password = ProdHelpers.load_var "MICROSOFT_API_PASSWORD",
    "This is generated by Microsoft Azure when you configure the app in App Registrations."
  config :faqcheck_web, :pow_assent,
    providers: [
      microsoft: [
	strategy: Assent.Strategy.AzureAD,
	tenant_id: microsoft_api_tenant_id,
	client_id: microsoft_api_client_id,
	client_secret: microsoft_api_password,
	redirect_uri: "https://#{app_name}.fly.dev/auth/microsoft/callback",
	authorization_params: [scope: "openid email profile Sites.Read.All"],
      ],
    ]

  config :faqcheck, :openid_connect_providers,
    microsoft: [
      discovery_document_uri: "https://login.microsoftonline.com/#{microsoft_api_tenant_id}/v2.0/.well-known/openid-configuration",
      client_id: microsoft_api_client_id,
      client_secret: microsoft_api_password,
      scope: "https://graph.microsoft.com/.default"
    ]

  database_url = ProdHelpers.load_var "DATABASE_URL",
    "For example: ecto://USER:PASS@HOST/DATABASE. This is set up by fly with: fly postgres create"

  config :faqcheck, Faqcheck.Repo,
    url: database_url,
    socket_options: [:inet6],
    pool_size: String.to_integer(System.get_env("POOL_SIZE") || "10")
end
